setwd("~/Documents/R_resources/codingSupportGroup/creatingFunctions")
source('~/Documents/R_resources/codingSupportGroup/creatingFunctions/function_towerSubplotLists.R')
randomSubplots("BART")
randomSubplots("CPER")
test = read.csv("input_shannonFunction.csv", header=T)
setwd("~/Documents/R_resources/codingSupportGroup/creatingFunctions")
test = read.csv("input_shannonFunction.csv", header=T)
View(test)
inputFileName = "input_shannonFunction.csv"
data = read.csv(inputFileName, header=T)
col.names(data)
names(data)
namesk(data)[1]
names(data)[1]
?row.names
?col.names
?cnames
rownames(data) = data[,1]
View(data)
head(data)
data = read.csv(inputFileName, header=T, row.names=1)
head(data)
data[1,1]
nrow(data)
ncol(data)
ls()
ls()
getwd()
setwd("~/Documents/R_resources/codingSupportGroup/creatingFunctions")
data = read.csv(inputFileName, header=T, row.names=1)
rm(test)
View(data)
head(data)
shannon = data.frame(matrix(data=NA, nrow=nrow(data), ncol=2))
cnames = c("plotID","Hprime")
colnames(shannon) = cnames
View(shannon)
rownames(data)
shannon$plotID = rownames(data)
View(shannon)
write.csv(shannon, "shannonOutput.csv")
write.csv(shannon, "shannonOutput.csv", row.names=FALSE)
H = 0
shannon$Hprime[1] = H
View(shannon)
source('~/Documents/R_resources/codingSupportGroup/creatingFunctions/function_shannonDiversity.R')
source('~/Documents/R_resources/codingSupportGroup/creatingFunctions/function_shannonDiversity.R')
getwd()
shannon("input_shannonFunction.csv")
test = read.csv("shannonOutput.csv", header=T)
View(test)
H
source('~/Documents/R_resources/codingSupportGroup/creatingFunctions/function_sampleNumCalculation.R')
sampleNum(0.2, 2)
sampleNum(0.5, 2)
sampleNum(0.5, 2, 20)
getwd()
rm(test)
source('~/Documents/R_resources/codingSupportGroup/creatingFunctions/function_degreeRadianConversion.R')
rad(90)
temp = rad(90)
temp
source('~/Documents/R_resources/codingSupportGroup/creatingFunctions/function_degreeRadianConversion.R')
rad(180)
source('~/Documents/R_resources/codingSupportGroup/creatingFunctions/function_degreeRadianConversion.R')
print("I rule!")
rad = function(degrees) {
radians = (degrees*pi)/180
return(radians)
print("I rule!")
}
rad(90)
source('~/Documents/R_resources/codingSupportGroup/creatingFunctions/function_degreeRadianConversion.R')
rad(90)
source('~/Documents/R_resources/codingSupportGroup/creatingFunctions/function_degreeRadianConversion.R')
temp = rad(90)
temp = 360
rad(temp)
temp = c(1:360)
rad(temp)
temp = read.csv("input_shannonFunction.csv", header=T, row.names=TRUE)
setwd("~/Documents/R_resources/codingSupportGroup/creatingFunctions")
temp = read.csv("input_shannonFunction.csv", header=T, row.names=TRUE)
temp = read.csv("input_shannonFunction.csv", header=T, row.names=1)
View(temp)
setwd("~/Documents/R_resources/codingSupportGroup/creatingFunctions")
source('~/Documents/R_resources/codingSupportGroup/creatingFunctions/function_shannonDiversity.R')
rm(list=ls())
source('~/Documents/R_resources/codingSupportGroup/creatingFunctions/function_shannonDiversity.R')
source('~/Documents/R_resources/codingSupportGroup/creatingFunctions/function_shannonDiversity.R')
shannon("input_shannonFunction.csv")
temp = read.csv("shannonOutput.csv", header=T)
View(temp)
View(temp)
i=1
j=1
for (j in 1:ncol(data)){
if (data[i,j] > 0){
H[j] = ((data[i,j])/Tot.obs)*log((data[i,j])/Tot.obs)
} else {H[j] = 0}
# End 'for loop for columns within row
}
data = read.csv("input_shannonFunction.csv", header=T)
View(data)
source('~/Documents/R_resources/codingSupportGroup/creatingFunctions/function_shannonDiversity.R')
source('~/Documents/R_resources/codingSupportGroup/creatingFunctions/function_shannonDiversity.R')
source('~/Documents/R_resources/codingSupportGroup/creatingFunctions/function_shannonDiversity.R')
shannon("input_shannonFunction.csv")
temp = read.csv("shannonOutput.csv", header=T)
View(temp)
getwd()
data
ncol(data[1,]>0)
ncol(data[1,])
data = read.csv("input_shannonFunction.csv", header=T, row.names=1)
ncol(data[1,])
ncol(data[1,]>0)
View(data)
ncol(data[data[1]>0])
ncol(data[data[1]>0],)
ncol(data[data[1,]>0,])
data[1,>0]
ncol(data[1,]>0)
data[1,]>0
length(data[1,]>0)
which(data[1,]>0)
length(which(data[1,]>0))
